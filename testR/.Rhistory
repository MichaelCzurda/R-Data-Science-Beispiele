install.packages(c("backports", "BH", "callr", "checkmate", "cli", "clipr", "colorspace", "curl", "data.table", "dbplyr", "digest", "dplyr", "e1071", "evaluate", "fansi", "forecast", "ggplot2", "git2r", "gplots", "Hmisc", "htmlTable", "httpuv", "httr", "jsonlite", "knitr", "markdown", "mime", "openssl", "pillar", "processx", "ps", "purrr", "R6", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "rmarkdown", "rstudioapi", "scales", "seasonal", "StanHeaders", "stringi", "tibble", "tidyr", "tinytex", "xts"))
install.packages("RTest")
library(RTest)
library("RTest", lib.loc="~/R/win-library/3.4")
remove.packages("RTest")
library(devtools)
devtools::install_github("zappingseb/RTest")
devtools::install_github("zappingseb/RTest")
library(testthat)
install.packages("RTest")
library(RTest)
library("RTest", lib.loc="~/R/win-library/3.4")
library(testthat)
#install.packages("testthat")
library(testthat)
getwd()
source('dummy_script.R')
testing_data <- data.frame('letters'=c('a', 'b', 'c', 'd'),
'numbers'=seq(1, 4))
print(testing_data)
context('testing data integrity')
library(RTest)
context('testing data integrity')
test_that('data dimensions correct', {
expect_equal(ncol(testing_data), 2)
expect_equal(nrow(testing_data), 4)
})
assignInNamespace("as.expectation.logical", RTest::as.expectation.logical, ns="testthat", pos="package:testthat")
test_that('no missing values', {
expect_identical(testing_data, na.omit(testing_data))
})
class(testing_data$letters)
model_data = data.frame('y'=c(rnorm(25, 0, 1), rnorm(25, 1, 1)),
'x'=rep(c('c1', 'c2'), each=25))
test.mod = lm(y ~ x, data=model_data)
model_data
test_that('right number of coefficients', {
expect_equal(length(test.mod$coefficients), 2)
})
test.mod
test.mod$coefficients
plot(model_data)
plot(x = model_data$x, y= model_data$y)
plot(x = model_data$x, y= model_data$y)
test_that('all factor levels present', {
expect_equivalent(levels(model_data$x), unlist(test.mod$xlevels))
})
test_that('mean of group 1 equals intercept', {
expect_equivalent(mean(model_data$y[model_data$x == 'c1']), test.mod$coefficients['(Intercept)'])
})
even_odd = function(n){
ifelse(n %% 2 == 0, print('even'), print('odd'))
}
test_that('even_odd prints the right message', {
expect_that(even_odd(1), prints_text('odd'))
expect_that(even_odd(6), prints_text('even'))
})
library(testthat)
test_file('test_someting.R')
getwd()
library(testthat)
test_file("test_dummy.R")
test_file("test_dummy.R")
x <- runif(20, 0, 100)
x
?runif
?range
x <- range(1:365)
x
x <- range(c(1:365))
x
seq(1:365)
x <- seq(1:365)
y <- runif(365, 1000, 10000)
data <- data.frame(x,y)
data
day <- seq(as.Date("2018/01/01", as.Date("2018/12/31"))
day <- seq(as.Date("2018/01/01", as.Date("2018/12/31"))
day <- seq(as.Date("2018/01/01", as.Date("2018/12/31"),"days")
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
day
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
day
month <- month(day)
month <- as.Date(day, "month")
month
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
class(day)
month <- format(day, "%m")
month
data <- data.frame(day,month,y)
data
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- runif(365, 1000, 10000)
data <- data.frame(day,month,y)
data
plot(data$y)
plot(data$day, data$y)
library("dplyr", lib.loc="~/R/win-library/3.4")
library(dplyr)
agg.data <- data %>% group_by(month) %>% funs(y)
agg.data
agg.data <- data %>% group_by(month) %>% summarise(y)
agg.data
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- rnormm(365, 1000, 10000)
data <- data.frame(day,month,y)
agg.data <- data %>% group_by(month) %>% summarise(y)
agg.data
agg.data <- data %>% group_by(month) %>% summarise_all(y)
agg.data <- data[;c(month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[:,c(month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data <- data[c(month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data <- data[c(data$month, data$y)] %>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[:,c(month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[c(:,month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[c(month, y)] %>% group_by(month) %>% summarise_all(y)
agg.data <- data[c(month, y)]
#%>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[c("month", "y")]
#%>% group_by(month) %>% summarise_all(y)
agg.data
agg.data <- data[c("month", "y")] %>% group_by(month) %>% summarise_all(sum)
agg.data
agg.data <- data[c("month", "y")] %>% group_by(month) %>% summarise()
agg.data
agg.data <- data[c("month", "y")] %>% group_by(month) %>% summarise(y)
agg.data
agg.data <- data[c("month", "y")] %>% group_by(month) %>% funs(y)
agg.data
agg.data <- data[c("month", "y")] %>% group_by(month) %>% summarize_at(vars(-y), funs(sum))
agg.data
y <- rnormm(365, 1000, 10000)
library(dplyr)
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- rnormm(365, 1000, 10000)
data <- data.frame(day,month,y)
data
agg.data <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y))
agg.data
View(agg.data)
plot(agg.data$sum)
class(agg.data$sum)
test.mod <- lm(sum ~ month, data=agg.data)
test.mod
plot(test.mod)
plot(agg.data)
plot(agg.data$month, agg.data$sum)
plot(agg.data$month, agg.data$sum)
abline(test.mod$coefficients[1], test.mod$coefficients[2])
abline(test.mod$coefficients[2], test.mod$coefficients[1])
library(dplyr)
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- rnormm(365, 1000, 10000)
data <- data.frame(day,month,y)
data
agg.data <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y))
View(agg.data)
test.mod <- lm(sum ~ month, data=agg.data)
plot(agg.data$month, agg.data$sum)
abline(test.mod$coefficients[2], test.mod$coefficients[1])
plot(x=agg.data$month, y=agg.data$sum)
abline(test.mod$coefficients[2], test.mod$coefficients[1])
dim(data)
test_that('data dimensions correct', {
expect_equal(ncol(testing_data), 3)
expect_equal(nrow(testing_data), 365)
})
test_that('data dimensions correct', {
expect_equal(ncol(testing_data), 3)
expect_equal(nrow(testing_data), 365)
})
source('dummy_data.R')
context('testing data integrity')
test_that('data dimensions correct', {
expect_equal(ncol(testing_data), 3)
expect_equal(nrow(testing_data), 365)
})
expect_equal(ncol(data), 3)
test_that('data dimensions correct', {
expect_equal(ncol(data), 3)
expect_equal(nrow(data), 365)
})
test_that('no missing values', {
expect_identical(data, na.omit(data))
})
test_that('data types correct', {
expect_is(data,'data.frame')
expect_is(data$day, 'Date')
#expect_is(testing_data$letters, 'character') #this one fails; they're factors
})
class(data$day)
class(data$month)
expect_is(data$y, 'numeric')
test_that('data types correct', {
expect_is(data,'data.frame')
expect_is(data$day, 'Date')
#expect_is(data$month, 'Date') #Fehler da month zu Faktor wird
expect_is(data$month, 'factor')
expect_is(data$y, 'numeric')
})
agg.data
test_that('Dimensionen korrekt sind', {
expect_equal(ncol(agg.data), 2)
expect_equal(nrow(agg.data), 12)
})
levels(data$month)
levels(agg.data$month)
test_that('Alle Faktoren vorhanden sind', {
expect_equivalent(levels(agg.data$month), levels(data$month))
})
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
source("dummy_data.R")
source("dummy_data.R")
test_file("test_dummy.R")
print("Summierung korrekt")
sum_check <- function(d1,d2){
if (sum(d1$y)==sum(d2$sum)){
print("Summierung korrekt")
}
}
sum_check(data, agg.data)
print("Summierung fehlerhaft")
sum_check <- function(d1,d2){
if (sum(d1$y)==sum(d2$sum)){
print("Summierung korrekt")
} else{
print("Summierung fehlerhaft")
}
}
sum_check(data, agg.data)
agg.data.false <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y+1))
sum_check(data, agg.data)
sum_check(data, agg.data.false)
test_file("test_dummy.r")
expect_that(sum_check(data, agg.data.false), prints_text('Summierung fehlerhaft'))
test_file("test_dummy.r")
?identical
?all.equal
library(testthat)
expect_equal(ncol(data), 3)
library(testthat)
library(dplyr)
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- runif(365, 1000, 10000)
data <- data.frame(day,month,y)
agg.data <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y))
agg.data.false <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y+1))
sum_check <- function(d1,d2){
if (sum(d1$y)==sum(d2$sum)){
print("Summierung korrekt")
} else{
print("Summierung fehlerhaft")
}
}
expect_equal(ncol(data), 3)
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
```{r include=FALSE}
test_file("test_dummy.R")
test_file("test_dummy.R", "minimal")
test_file("test_dummy.R", "summary")
library(testthat)
test_file("test_dummy.R")
library(testthat)
test_file("test_dummy.R")
#library(testthat)
getwd()
#test_file("test_dummy.R")
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
this.dir <- dirname(parent.frame(2)$ofile)
#this.dir <- dirname(parent.frame(2)$ofile)
parent.frame(2)$ofile
#this.dir <- dirname(parent.frame(2)$ofile)
parent.frame(2)
#this.dir <- dirname(parent.frame(2)$ofile)
print(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#test_file("test_dummy.R")
library(testthat)
#test_file("test_dummy.R")
test_file("test_dummy.R")
getwd()
test_file("test_dummy.R")
library(dplyr)
day <- seq(as.Date("2018/01/01"), as.Date("2018/12/31"),"days")
month <- format(day, "%m")
y <- runif(365, 1000, 10000)
data <- data.frame(day,month,y)
agg.data <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y))
agg.data.false <- data %>%
select(month, y) %>%
group_by(month) %>%
summarise(sum = sum(y+1))
sum_check <- function(d1,d2){
if (sum(d1$y)==sum(d2$sum)){
print("Summierung korrekt")
} else{
print("Summierung fehlerhaft")
}
}
source('dummy_data.R')
context('Testen der Datenintegrität: Ausgangsdaten')
test_that('Dimension des Dataframes korrekt', {
expect_equal(ncol(data), 3)
expect_equal(nrow(data), 365)
})
test_that('Keine missing values vorhanden sind', {
expect_identical(data, na.omit(data))
})
test_that('Datentypen korrekt sind', {
expect_is(data,'data.frame')
expect_is(data$day, 'Date')
#expect_is(data$month, 'Date') #Fehler da month zu Faktor wird
expect_is(data$month, 'factor')
expect_is(data$y, 'numeric')
})
context('Testen der Datenintegrität: Aggregierte Daten')
test_that('Dimensionen korrekt sind', {
expect_equal(ncol(agg.data), 2)
expect_equal(nrow(agg.data), 12)
})
test_that('Alle Faktoren vorhanden sind', {
expect_equivalent(levels(agg.data$month), levels(data$month))
})
context('Testen der eigenen Summencheck-Funktion')
test_that('die Summen der Dataframes gleich sind', {
expect_that(sum_check(data, agg.data), prints_text('Summierung korrekt'))
expect_that(sum_check(data, agg.data.false), prints_text('Summierung fehlerhaft'))
})
test_file("test_dummy.R")
test_file("test_dummy.R")
clear()
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R", "minimal")
test_file("test_dummy.R", "summary")
test_file("test_dummy.R", "stop")
test_file("test_dummy.R", "stop")
test_file("test_dummy.R", "stop")
test_file("test_dummy.R", "summary")
test_file("test_dummy.R")
head(data)
agg.data
agg.data.false
sum_check(data, agg.data)
sum_check(data, agg.data.false)
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
test_file("test_dummy.R")
sum_check(data, agg.data)
sum_check(data, agg.data.false)
test_file("test_dummy.R")
test_file("test_dummy.R", "minimal")
