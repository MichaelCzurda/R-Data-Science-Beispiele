knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("neuronalnet")
install.packages("neuralnet")
install.packages("neuralnet")
# Trainingsdaten
TKS=c(20,10,30,20,80,30)
CSS=c(90,20,40,50,50,80)
Placed=c(1,0,0,0,1,1)
# Dataframe erstellen
df=data.frame(TKS,CSS,Placed)
head(df)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn = neuralnet(Placed~TKS, CSS, data = df, act.fct = "logistic", linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn = neuralnet(Placed~TKS, CSS, data = df, act.fct = "logistic", linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn = neuralnet(Placed~TKS, CSS, data = df,hidden = 3,  act.fct = "logistic", linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn = neuralnet(Placed~TKS, CSS, data = df , hidden = 3,  act.fct = "logistic", linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",linear.output = FALSE)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",linear.output = FALSE)
#Placed~TKS+CSS, Placed is label and TKS and CSS are features.
#df is dataframe,
#hidden=3: represents single layer with 3 neurons respectively.
#act.fct = "logistic" used for smoothing the result.
#linear.ouput=FALSE: set FALSE for apply act.fct otherwise TRUE
plot(nn)
#Bibliothek laden
require(neuralnet)
#Training des neuronalen Netzes
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",linear.output = FALSE)
#Placed~TKS+CSS, Placed is label and TKS and CSS are features.
#df is dataframe,
#hidden=3: represents single layer with 3 neurons respectively.
#act.fct = "logistic" used for smoothing the result.
#linear.ouput=FALSE: set FALSE for apply act.fct otherwise TRUE
plot(nn)
#Testdaten
TKS=c(30,40,85)
CSS=c(85,50,40)
test=data.frame(TKS,CSS)
predict=compute(nn, test)
#predict$
predict=compute(nn, test)
predict$net.result
prob <- predict$net.result
pred <- ifelse(prob>0.5,1,0)
pred
plot(nn)
